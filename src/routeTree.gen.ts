/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as HomeRouteImport } from './routes/home'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OrdersIndexRouteImport } from './routes/orders/index'
import { Route as CustomersIndexRouteImport } from './routes/customers/index'
import { Route as OrdersNewRouteImport } from './routes/orders/new'
import { Route as OrdersOrderIdRouteImport } from './routes/orders/$orderId'
import { Route as CustomersNewRouteImport } from './routes/customers/new'
import { Route as CustomersCustomerIdRouteImport } from './routes/customers/$customerId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersIndexRoute = OrdersIndexRouteImport.update({
  id: '/orders/',
  path: '/orders/',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomersIndexRoute = CustomersIndexRouteImport.update({
  id: '/customers/',
  path: '/customers/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersNewRoute = OrdersNewRouteImport.update({
  id: '/orders/new',
  path: '/orders/new',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersOrderIdRoute = OrdersOrderIdRouteImport.update({
  id: '/orders/$orderId',
  path: '/orders/$orderId',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomersNewRoute = CustomersNewRouteImport.update({
  id: '/customers/new',
  path: '/customers/new',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomersCustomerIdRoute = CustomersCustomerIdRouteImport.update({
  id: '/customers/$customerId',
  path: '/customers/$customerId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/customers/$customerId': typeof CustomersCustomerIdRoute
  '/customers/new': typeof CustomersNewRoute
  '/orders/$orderId': typeof OrdersOrderIdRoute
  '/orders/new': typeof OrdersNewRoute
  '/customers': typeof CustomersIndexRoute
  '/orders': typeof OrdersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/customers/$customerId': typeof CustomersCustomerIdRoute
  '/customers/new': typeof CustomersNewRoute
  '/orders/$orderId': typeof OrdersOrderIdRoute
  '/orders/new': typeof OrdersNewRoute
  '/customers': typeof CustomersIndexRoute
  '/orders': typeof OrdersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/customers/$customerId': typeof CustomersCustomerIdRoute
  '/customers/new': typeof CustomersNewRoute
  '/orders/$orderId': typeof OrdersOrderIdRoute
  '/orders/new': typeof OrdersNewRoute
  '/customers/': typeof CustomersIndexRoute
  '/orders/': typeof OrdersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/login'
    | '/customers/$customerId'
    | '/customers/new'
    | '/orders/$orderId'
    | '/orders/new'
    | '/customers'
    | '/orders'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/login'
    | '/customers/$customerId'
    | '/customers/new'
    | '/orders/$orderId'
    | '/orders/new'
    | '/customers'
    | '/orders'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/login'
    | '/customers/$customerId'
    | '/customers/new'
    | '/orders/$orderId'
    | '/orders/new'
    | '/customers/'
    | '/orders/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRoute: typeof HomeRoute
  LoginRoute: typeof LoginRoute
  CustomersCustomerIdRoute: typeof CustomersCustomerIdRoute
  CustomersNewRoute: typeof CustomersNewRoute
  OrdersOrderIdRoute: typeof OrdersOrderIdRoute
  OrdersNewRoute: typeof OrdersNewRoute
  CustomersIndexRoute: typeof CustomersIndexRoute
  OrdersIndexRoute: typeof OrdersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders/': {
      id: '/orders/'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customers/': {
      id: '/customers/'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof CustomersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders/new': {
      id: '/orders/new'
      path: '/orders/new'
      fullPath: '/orders/new'
      preLoaderRoute: typeof OrdersNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders/$orderId': {
      id: '/orders/$orderId'
      path: '/orders/$orderId'
      fullPath: '/orders/$orderId'
      preLoaderRoute: typeof OrdersOrderIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customers/new': {
      id: '/customers/new'
      path: '/customers/new'
      fullPath: '/customers/new'
      preLoaderRoute: typeof CustomersNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customers/$customerId': {
      id: '/customers/$customerId'
      path: '/customers/$customerId'
      fullPath: '/customers/$customerId'
      preLoaderRoute: typeof CustomersCustomerIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRoute: HomeRoute,
  LoginRoute: LoginRoute,
  CustomersCustomerIdRoute: CustomersCustomerIdRoute,
  CustomersNewRoute: CustomersNewRoute,
  OrdersOrderIdRoute: OrdersOrderIdRoute,
  OrdersNewRoute: OrdersNewRoute,
  CustomersIndexRoute: CustomersIndexRoute,
  OrdersIndexRoute: OrdersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
